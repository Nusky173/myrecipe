// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                 String    @id @default(cuid())
    userId             String
    providerType       String
    providerId         String
    providerAccountId  String
    refreshToken       String?
    accessToken        String?
    accessTokenExpires DateTime?
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    user               User      @relation(fields: [userId], references: [id])

    @@unique([providerId, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    userId       String
    expires      DateTime
    sessionToken String   @unique
    accessToken  String   @unique
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id])
}

model User {
    id        String   @id @default(cuid())
    name      String?
    email     String?  @unique
    image     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    accounts  Account[]
    sessions  Session[]
    myRecipes Recipe[]
}

model VerificationRequest {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}

model Recipe {
    id              String   @id @default(cuid())
    userId          String
    name            String   @default("")
    preparationTime Int?
    cookingTime     Int?
    restTime        Int?
    category        Category @default(OTHER)

    user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    steps           Step[]
    ingredientsUsed IngredientOnRecipe[]
}

model Step {
    id           String @id @default(cuid())
    recipeId     String
    ranking      Int    @default(0)
    instructions String @default("")

    recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model Ingredient {
    id   String @id @default(cuid())
    name String @default("")

    onRecipe IngredientOnRecipe[]
}

model IngredientOnRecipe {
    id           String   @id @default(cuid())
    recipeId     String
    ingredientId String
    quantity     Decimal?
    nbPerson     Int?

    Recipe     Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    Ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
}

enum Category {
    STARTER
    MAIN_DISH
    DESERT
    SALAD
    SAUCE
    SOUP
    COCKTAIL
    DRINK
    OTHER
}
